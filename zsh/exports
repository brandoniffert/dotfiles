# vim: ft=zsh
# Language
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_COLLATE=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_MESSAGES=en_US.UTF-8
export LC_MONETARY=en_US.UTF-8
export LC_NUMERIC=en_US.UTF-8
export LC_TIME=en_US.UTF-8
export LESSCHARSET=utf-8

# XDG
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
export XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"}
export XDG_DATA_HOME=${XDG_DATA_HOME:-"$HOME/.local/share"}
export XDG_STATE_HOME=${XDG_STATE_HOME:-"$HOME/.local/state"}

if [[ "$OSTYPE" == "darwin"* ]]; then
  export XDG_RUNTIME_DIR="$HOME/Library/Application Support"
fi

# Manually manage XDG for some programs
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME"/aws/config
export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME"/aws/credentials
export CARGO_HOME="$XDG_DATA_HOME"/cargo
export COMPOSER_HOME="$XDG_CONFIG_HOME"/composer
export COMPOSER_CACHE_DIR="$XDG_CACHE_HOME"/composer
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
export GEM_HOME="$XDG_DATA_HOME"/gem
export GEM_SPEC_CACHE="$XDG_CACHE_HOME"/gem
export GOMODCACHE="$XDG_CACHE_HOME"/go/mod
export GOPATH="$XDG_DATA_HOME"/go
export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node/repl_history
export npm_config_cache="$XDG_CACHE_HOME"/npm
export npm_config_devdir="$XDG_CACHE_HOME"/node-gyp
export npm_config_prefix="$HOME/.local"
export npm_config_userconfig="$XDG_CONFIG_HOME"/npm/config
export PYTHONPYCACHEPREFIX=$XDG_CACHE_HOME/python
export PYTHONUSERBASE=$XDG_DATA_HOME/python
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME"/ripgrep/ripgreprc
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup
export SQLITE_HISTORY="$XDG_DATA_HOME"/sqlite_history
export SUBVERSION_HOME="$XDG_CONFIG_HOME"/subversion
export TERMINFO="$XDG_DATA_HOME"/terminfo
export YARN_CACHE_FOLDER="$XDG_CACHE_HOME"/yarn
export _Z_DATA="$XDG_DATA_HOME"/z

export EDITOR=nvim
export LESSHISTFILE=-
export PAGER=less
export VIRTUAL_ENV_DISABLE_PROMPT=1

# Filename (if known), line number if known, falling back to percent if known,
# falling back to byte offset, falling back to dash
export LESSPROMPT='?f%f .?ltLine %lt:?pt%pt\%:?btByte %bt:-...'

# i = case-insensitive searches, unless uppercase characters in search string
# F = exit immediately if output fits on one screen
# M = verbose prompt
# R = ANSI color support
# S = chop long lines (rather than wrap them onto next line)
# X = suppress alternate screen
export LESS=iFMRSX

# Color man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\e[01;34m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;43;30m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[04;37m'

# FZF
export FZF_DEFAULT_COMMAND='fd --color=never --strip-cwd-prefix --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND} --type f"
export FZF_ALT_C_COMMAND="${FZF_DEFAULT_COMMAND} --type d"

local FZF_DEFAULT_OPTS=""
FZF_DEFAULT_OPTS+=" --border=sharp"
FZF_DEFAULT_OPTS+=" --color fg:#9399B2,fg+:-1,bg:-1,bg+:#2a2b3d,gutter:-1,hl:bold:-1,hl+:-1,info:-1,prompt:-1,marker:3,header:2,pointer:3,border:#9399B2"
FZF_DEFAULT_OPTS+=" --height 40%"
FZF_DEFAULT_OPTS+=" --info=inline"
FZF_DEFAULT_OPTS+=" --multi"
FZF_DEFAULT_OPTS+=" --prompt=' '"
FZF_DEFAULT_OPTS+=" --pointer=' '"
FZF_DEFAULT_OPTS+=" --marker='• '"
FZF_DEFAULT_OPTS+=" --bind 'ctrl-/:change-preview-window(50%|hidden|)'"
export FZF_DEFAULT_OPTS
